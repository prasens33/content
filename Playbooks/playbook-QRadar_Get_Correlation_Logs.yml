id: QRadarGetCorrelationLogs
version: -1
name: QRadarGetCorrelationLogs
fromversion: 4.0.0
starttaskid: "0"
description: Return the QRadar Correlation logs if exist
tasks:
  "0":
    id: "0"
    taskid: 5c0ada9e-ba74-4b7d-85cb-81b2de1a1e3a
    type: start
    task:
      id: 5c0ada9e-ba74-4b7d-85cb-81b2de1a1e3a
      version: -1
      name: ""
      description: Start
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 50
        }
      }
    note: false
  "3":
    id: "3"
    taskid: bb637f9c-a735-4bbb-8ae3-d2bcd1471ed3
    type: regular
    task:
      id: bb637f9c-a735-4bbb-8ae3-d2bcd1471ed3
      version: -1
      name: Get correlations logs result
      description: Gets the correlations logs result from the search
      scriptName: QRadarGetCorrelationsLogsResult
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      correlation_id:
        simple: ${inputs.Qid}
      headers:
        simple: ${inputs.Headers}
      range:
        simple: ${inputs.Range}
      search_id:
        simple: ${QRadar.Search.ID}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 545
        }
      }
    note: false
  "4":
    id: "4"
    taskid: 1d3d6e9d-e7c3-452c-864d-b934743b9c1b
    type: title
    task:
      id: 1d3d6e9d-e7c3-452c-864d-b934743b9c1b
      version: -1
      name: Done
      description: Done
      type: title
      iscommand: false
      brand: ""
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 720
        }
      }
    note: false
  "6":
    id: "6"
    taskid: a5b5317c-c02d-4042-883c-ce2fb02da903
    type: regular
    task:
      id: a5b5317c-c02d-4042-883c-ce2fb02da903
      version: -1
      name: Create search
      description: Creates search
      script: '|||qradar-searches'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "7"
    scriptarguments:
      headers: {}
      query_expression:
        simple: select RULENAME(${inputs.Qid}), sourceip, destinationip, eventcount,
          sourceport, username, starttime, destinationport, magnitude, identityip,
          CATEGORYNAME(category), PROTOCOLNAME(protocolid), LOGSOURCENAME(logsourceid)${inputs.AdditionalQueryFields}
          from events where "CRE Name" IS NULL AND INOFFENSE(${inputs.OffenseID})
          START '${inputs.StartTime}'
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 195
        }
      }
    note: false
  "7":
    id: "7"
    taskid: a4156c68-3d15-43ad-826a-b0d2d5dcf1b3
    type: playbook
    task:
      id: a4156c68-3d15-43ad-826a-b0d2d5dcf1b3
      version: -1
      name: GenericPolling
      description: Polls until search is complete
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      Ids:
        simple: ${QRadar.Search.ID}
      Interval:
        simple: ${inputs.Interval}
      PollingCommandArgName:
        simple: search_id
      PollingCommandName:
        simple: qradar-get-search
      Timeout:
        simple: ${inputs.Timeout}
      dt:
        simple: QRadar.Search(val.Status!=='COMPLETED' ).ID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
    view: |-
      {
        "position": {
          "x": 50,
          "y": 370
        }
      }
    note: false
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 735,
        "width": 380,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: OffenseID
  value:
    simple: ${incident.labels.id}
  required: true
  description: The offense ID to query.
- key: StartTime
  value:
    simple: ${incident.labels.start_time}
  required: true
  description: query from startTime (in timestamp format).
- key: Interval
  value:
    simple: "1"
  required: false
  description: Interval to poll for results in minutes. Default is 1 minute.
- key: Timeout
  value:
    simple: "10"
  required: false
  description: Timeout in minutes. Default is 10 minutes.
- key: Qid
  value:
    simple: ${Correlation.QID}
  required: true
  description: The Correlation QID to query.
- key: AdditionalQueryFields
  value: {}
  required: false
  description: ""
- key: Headers
  value: {}
  required: false
  description: Table headers
- key: Range
  value: {}
  required: false
  description: Range of results to return (e.g. 5-11)
outputs:
- contextPath: QRadar.Log
  description: The QRadar offense correlation logs
  type: unknown
- contextPath: QRadar.Log.QID
  description: The log's correlation ID
  type: unknown
- contextPath: QRadar.Log.SourceIP
  description: The log's source IP
  type: unknown
- contextPath: QRadar.Log.DestinationPort
  description: The log's destination port
  type: unknown
- contextPath: QRadar.Log.SourcePort
  description: The log's source port
  type: unknown
- contextPath: QRadar.Log.DestinationIP
  description: The log's destination IP
  type: unknown
- contextPath: QRadar.Log.Category
  description: The log's category
  type: unknown
- contextPath: QRadar.Log.IdentityIP
  description: The log's identity IP
  type: unknown
- contextPath: QRadar.Log.Username
  description: The log's username
  type: unknown
- contextPath: QRadar.Log.StartTime
  description: The log's start time
  type: unknown
- contextPath: QRadar.Log.Magnitude
  description: The log's magnitude
  type: unknown
- contextPath: QRadar.Log.ProtocolName
  description: The log's protocol name
  type: unknown
releaseNotes: "Created QRadarGetCorrelationLogs playbook - an alternative to QRadarGetCorrelationLogs automation."
tests:
  - Forgive me for my sins but I did not create any test
